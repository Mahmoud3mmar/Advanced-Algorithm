# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LQYZkxkPxvArVjIlxnmdK1wk0Pa4eY-I
"""

import time

#Hash Table

def longest_common_substring_Hash(s1, s2):

  substrings = []
  for i in range(len(s1)):
    for j in range(i+1, len(s1)+1):
      # Calculate the hash value of the substring of s1
      hash_value = hash(s1[i:j])
      # Check if the substring with the same hash value is present in s2
      if s2.find(s1[i:j]) != -1:
        # If the substring is present, add it to the list
        substrings.append(s1[i:j])
  # Sort the list in descending order of length
  substrings.sort(key=len, reverse=True)
  # Return the longest common substring
  return substrings[0]



def analyze_longest_common_substring_Hash_Best():
    # Test cases with small input sizes
    start, end = 0, 0

    start = time.time()
    print("BestCase")
    print(longest_common_substring_Hash("abcdef", "abcdefg"))  # Output: "abcdef"
    print(longest_common_substring_Hash("abcdefg", "hijklmg"))  # Output: "g"    end = time.time()

    end = time.time()
    print(f"Hash table Emprical Anlaysis: {end - start} seconds")

analyze_longest_common_substring_Hash_Best()


def analyze_longest_common_substring_Hash_Average():
    # Test cases with small input sizes
    start, end = 0, 0

    start = time.time()
    print("AverageCase")
    print(longest_common_substring_Hash("abcdefasd", "abcddsaaefg"))  
    print(longest_common_substring_Hash("abcdefgasd", "hdaijklmg")) 

    end = time.time()
    print(f"Hash table Emprical Anlaysis: {end - start} seconds")

analyze_longest_common_substring_Hash_Average()


def analyze_longest_common_substring_Hash_Worst():
    # Test cases with small input sizes
    start, end = 0, 0

    start = time.time()
    print("WorstCase")
    print(longest_common_substring_Hash("abcdefasdasd", "abcdddfgqsaaefg"))  
    print(longest_common_substring_Hash("abcdefgasdas", "hddasaijklmg")) 

    end = time.time()
    print(f"Hash table Emprical Anlaysis: {end - start} seconds")

analyze_longest_common_substring_Hash_Worst()



#Dynamic Algorithm


def longest_common_substring_Dynamic(s1, s2):
    m, n = len(s1), len(s2)
    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]
    longest, end = 0, 0
    for i in range(1, m+1):
        for j in range(1, n+1):
            if s1[i-1] == s2[j-1]:
                dp[i][j] = dp[i-1][j-1] + 1
                if dp[i][j] > longest:
                    longest = dp[i][j]
                    end = i
            else:
                dp[i][j] = 0
    return s1[end-longest:end]




def analyze_longest_common_substring_Dynamic_Best():
    
    start2 = time.time()
    print("Best Case")
    print(longest_common_substring_Dynamic("abcde", "abd"))  # Output: "ab"
    print(longest_common_substring_Dynamic("abcdefg", "ghijklmno"))  # Output: "g"
    print(longest_common_substring_Dynamic("abcdefg", "cde"))  # Output: "cde"d"

    end2 = time.time()
    print(f"Dynamic Emprical Anlaysis: {end2 - start2} seconds")



analyze_longest_common_substring_Dynamic_Best()



def analyze_longest_common_substring_Dynamic_Average():
  
    start2 = time.time()
    print("Average Case")
    print(longest_common_substring_Dynamic("abcdeasd", "abxdedas"))  
    print(longest_common_substring_Dynamic("abcdefasg", "ghijkdslmno"))  
    print(longest_common_substring_Dynamic("abcdefgg", "scdeasd")) 

    end2 = time.time()
    print(f"Dynamic Emprical Anlaysis: {end2 - start2} seconds")



analyze_longest_common_substring_Dynamic_Average()


def analyze_longest_common_substring_Dynamic_Worst():
    
    start2 = time.time()
    print("Worst Case")
    print(longest_common_substring_Dynamic("abcde", "abxde"))  # O
    print(longest_common_substring_Dynamic("abcdefg", "ghijklmno"))  
    print(longest_common_substring_Dynamic("abcdefg", "cde")) 

    end2 = time.time()
    print(f"Dynamic Emprical Anlaysis: {end2 - start2} seconds")



analyze_longest_common_substring_Dynamic_Worst()
#Designed Algoritm


def longest_common_substring_Designed(s1, s2):

  substrings = []
  temp = ""
  for i in range(len(s1)):
    if s1[i] == s2[i]:
      temp += s1[i]
    else:
      substrings.append(temp)
      temp = ""
  substrings.append(temp)
  substrings.sort(key=len, reverse=True)
  return substrings[0]


def analyze_longest_common_substring_Designed_Best():
    
    start2 = time.time()
    print("Best Case")
    print(longest_common_substring_Designed("abcdefg", "abcdegf")) \

    end2 = time.time()
    print(f"Designed Emprical Anlaysis: {end2 - start2} seconds")



analyze_longest_common_substring_Designed_Best()



def analyze_longest_common_substring_Designed_Average():
    
    start2 = time.time()
    print("Average Case")
    print(longest_common_substring_Designed("abcdefgasd", "abcdegfdas")) 

    end2 = time.time()
    print(f"Designed Emprical Anlaysis: {end2 - start2} seconds")



analyze_longest_common_substring_Designed_Average()



def analyze_longest_common_substring_Designed_Worst():
    # Test cases with small input sizes
    start2 = time.time()
    print("Worst Case")
    print(longest_common_substring_Dynamic("abcdefgasd", "ghijklfasamno"))  

    end2 = time.time()
    print(f"Designed Emprical Anlaysis: {end2 - start2} seconds")



analyze_longest_common_substring_Designed_Worst()